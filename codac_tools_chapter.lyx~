#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
CODAC Tools on ISTTOK and Compass
\end_layout

\begin_layout Standard
The CODAC in ISTTOK and Compass share several common tools and are thus
 somewhat similar.
 These tools were designed to be flexible, modular, independent from operating
 system and computer architecture.
 This is achieved by using non-proprietary open-source software, industry
 standards and cross-platform programming languages.
 These systems are open-source and their code is stored in a subversion
 repository.
\end_layout

\begin_layout Section
FireSignal
\end_layout

\begin_layout Standard
FireSignal is the part of the CODAC that allows the operator to configure
 and monitor the experiments, also retrieving data from diagnostics and
 storing it in the database.
\end_layout

\begin_layout Standard
As a fully modular system FireSignal avoids dependencies of particular technolog
ies.
 It is composed of five different modules, which provide all the functionality
 to the system:
\end_layout

\begin_layout Itemize
Central Server—works as bridge between all the other components.
 It is responsible for managing all the connections, commands and data broadcast.
 
\end_layout

\begin_layout Itemize
Database connector—controls the installed database, storing and fetching
 data when ordered by the Central Server, providing an abstract layer, independe
nt of the database solution.
 
\end_layout

\begin_layout Itemize
Security Manager—the Central Server queries this component to authenticate
 users and nodes and to authorize all the operations.
 The security schema used (LDAP, PAM, etc.) is abstracted by the security
 manager.
 
\end_layout

\begin_layout Itemize
Hardware Clients—these are responsible for driving the devices and for data
 readout.
 Template nodes, with the communication to the Central Server already implemente
d, are provided in different languages and can be extended to integrate
 any hardware device.
 
\end_layout

\begin_layout Itemize
User Clients—these are the graphical user-interfaces, which allow the interactio
n with the system.
 It is the only optional component as the system can still operate without
 direct human intervention, e.g.
 when FireSignal works as a system which receives orders from other data
 acquisition system.
\end_layout

\begin_layout Standard
All the components are connected through CORBA allowing them to run in different
 operating systems and to be written in different computer languages.
 Currently FireSignal is using Java and C++ as main languages.
 
\end_layout

\begin_layout Subsection
Database connector
\end_layout

\begin_layout Standard
All data arrives tagged with two absolute time-stamps: acquisition start
 time, end time.
 These can later be used to generate time arrays and correlate data.
 The data also comes tagged with an event.
 A large number of what happens during the discharge can be considered an
 event.
 Examples of events include the discharge start trigger, external triggers
 and disruptions.
 Events are defined by a unique name and number and by an absolute time-stamp.
 In the case of ISTTOK the event shot is defined by the string ‘0x0000’,
 where the unique number is the shot number and the time-stamp the time
 in which there is the formation of plasma.
 The accuracy of these times stamps isn't guaranted by FireSignal so an
 external timing system is necessary.
\end_layout

\begin_layout Standard
The installer for FireSignal originaly came with three database connector
 implementations: MySQL, PostgreSQL and PostgreSQL with external files for
 the binary data.
 A fourth, supporting Compass Database (CDB), was developed later.
 This one was also used as a base for a version using HDF5 (as opposed to
 plain binary files) files to store data, which isn't currently being used.
 
\end_layout

\begin_layout Subsection
Hardware Clients
\end_layout

\begin_layout Standard
Hardware clients, also named nodes, provide the interface between the installed
 devices and the Central Server.
 Their main responsibilities are the configuration of hardware, tagging
 data and events with the correct time-stamps and sending them to the server.
 Nodes are organized as follows: 
\end_layout

\begin_layout Itemize
Nodes contain Hardware devices.
\end_layout

\begin_layout Itemize
Hardware devices contain parameters.
\end_layout

\begin_layout Itemize
Parameters contain configuration fields.
\end_layout

\begin_layout Standard
This organization is not very different from a typical acquisition system,
 with crates (Nodes) containing boards (Hardware) with several channels
 (parameters).
 By default, each parameter in the same hardware has a different value for
 the same configuration fields but it's possible to have them share the
 same value.
\end_layout

\begin_layout Standard
Nodes are described in two types of XML files, one for the Node iself and
 another for each Hardware.
 The Node file is very simple, only containing the name and description
 for the node itself.
 The Hardware file contains the name and description for the hardware itself
 and also the list of parameters and their fields.
 Parameters and fields can be defined to be editable or not, it is possible
 to force fields be not be empty, have their value shared across the same
 Hardware and it also defines their type.
 Parameters have a mime-type that is used to determine how to store and
 display data (there is a plugin system that allows user defined mime-types).
 Likewise, there are several standard defined field types and it is possible
 to have user-defined types, thanks to the plugin system.
\end_layout

\begin_layout Subsection
CORBA
\end_layout

\begin_layout Standard
As with all the FireSignal components, the communication between the Nodes
 and the Central Server is perform through CORBA.
 Each Node implements the FireSignal server–node communication standard.
 The number of functions is quite significant and ranges from hardware configura
tion details to event broadcasting and data acquisition.
 FireSignal is bundled with server–node communication standard implementations
 in two different languages: Java and Python (C++ is now being developed).
 This allows developers to focus only in the interface between Nodes and
 hardware without having to learn or concern about the communication protocol
 with the Central Server.
\end_layout

\begin_layout Subsection
User Client
\end_layout

\begin_layout Standard
The user client is a standalone application, developed in Java and deployed
 using Java Web Start technology, serving as a front-end of the FireSignal
 system.
\end_layout

\begin_layout Section
SDAS
\end_layout

\end_body
\end_document
